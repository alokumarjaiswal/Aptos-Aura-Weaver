{"version":3,"file":"static/js/170.0a0a077d.chunk.js","mappings":"6MAoBO,MAAMA,EAAeC,MAC1BC,EACAC,KAEA,IACE,IAAKA,EAAOC,SAAWD,EAAOE,UAC5B,MAAM,IAAIC,MAAM,qGAGlB,MAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQP,GAExB,MAAMQ,QAAiBC,MAAM,iDAAkD,CAC7EC,OAAQ,OACRC,QAAS,CACP,eAAkBV,EAAOC,OACzB,sBAAyBD,EAAOE,WAElCS,KAAMP,IAGR,IAAKG,EAASK,GACZ,MAAM,IAAIT,MAAM,uBAADU,OAAwBN,EAASO,aAGlD,MAAMC,QAAeR,EAASS,OAE9B,MAAO,CACLC,SAAS,EACTC,KAAMH,EAAOI,SACbC,IAAI,GAADP,OAAKb,EAAOqB,SAAOR,OAAGE,EAAOI,UAEpC,CAAE,MAAOG,GAEP,OADAC,QAAQD,MAAM,qBAAsBA,GAC7B,CACLL,SAAS,EACTK,MAAOA,aAAiBnB,MAAQmB,EAAME,QAAU,4BAEpD,GAMWC,EAAuB3B,MAClC4B,EACA1B,KAEA,IACE,IAAKA,EAAOC,SAAWD,EAAOE,UAC5B,MAAM,IAAIC,MAAM,qGAGlB,MAAMI,QAAiBC,MAAM,iDAAkD,CAC7EC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,eAAkBV,EAAOC,OACzB,sBAAyBD,EAAOE,WAElCS,KAAMgB,KAAKC,UAAU,CACnBC,cAAeH,EACfI,eAAgB,CACdC,KAAM,8BAKZ,IAAKxB,EAASK,GACZ,MAAM,IAAIT,MAAM,gCAADU,OAAiCN,EAASO,aAG3D,MAAMC,QAAeR,EAASS,OAE9B,MAAO,CACLC,SAAS,EACTC,KAAMH,EAAOI,SACbC,IAAI,GAADP,OAAKb,EAAOqB,SAAOR,OAAGE,EAAOI,UAEpC,CAAE,MAAOG,GAEP,OADAC,QAAQD,MAAM,8BAA+BA,GACtC,CACLL,SAAS,EACTK,MAAOA,aAAiBnB,MAAQmB,EAAME,QAAU,qCAEpD,GAMWQ,EAAgBA,KACpB,CACLX,QAASY,qCACThC,OAAQgC,CAAAA,SAAAA,aAAAA,WAAAA,qBAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,EAAAA,wBAAAA,SAAAA,yBAAAA,2CAAAA,sBAAAA,wBAAAA,qBAAAA,OAAAA,2BAAAA,QAAAA,sBAAAA,OAAAA,2BAAAA,QAAAA,uBAAAA,sCAAYC,yBACpBhC,UAAW+B,CAAAA,SAAAA,aAAAA,WAAAA,qBAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,EAAAA,wBAAAA,SAAAA,yBAAAA,2CAAAA,sBAAAA,wBAAAA,qBAAAA,OAAAA,2BAAAA,QAAAA,sBAAAA,OAAAA,2BAAAA,QAAAA,uBAAAA,sCAAYE,8BAOdC,EAAoBA,CAC/BL,EACAM,EACAC,EACAC,KAEO,CACLR,OACAM,cACAG,MAAOF,EACPC,aACAE,aAAcC,OAAOC,SAASC,OAC9BC,YAAY,IAAIC,MAAOC,e","sources":["services/ipfsService.ts"],"sourcesContent":["/**\r\n * IPFS Service for uploading and managing NFT metadata and images\r\n */\r\n\r\nexport interface IPFSUploadResult {\r\n  success: boolean;\r\n  hash?: string;\r\n  url?: string;\r\n  error?: string;\r\n}\r\n\r\nexport interface IPFSConfig {\r\n  gateway: string;\r\n  apiKey?: string;\r\n  secretKey?: string;\r\n}\r\n\r\n/**\r\n * Upload a file to IPFS using Pinata\r\n */\r\nexport const uploadToIPFS = async (\r\n  file: File | Blob,\r\n  config: IPFSConfig\r\n): Promise<IPFSUploadResult> => {\r\n  try {\r\n    if (!config.apiKey || !config.secretKey) {\r\n      throw new Error('IPFS API keys not configured. Please set REACT_APP_PINATA_API_KEY and REACT_APP_PINATA_SECRET_KEY');\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    const response = await fetch('https://api.pinata.cloud/pinning/pinFileToIPFS', {\r\n      method: 'POST',\r\n      headers: {\r\n        'pinata_api_key': config.apiKey,\r\n        'pinata_secret_api_key': config.secretKey,\r\n      },\r\n      body: formData\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`IPFS upload failed: ${response.statusText}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n\r\n    return {\r\n      success: true,\r\n      hash: result.IpfsHash,\r\n      url: `${config.gateway}${result.IpfsHash}`\r\n    };\r\n  } catch (error) {\r\n    console.error('IPFS upload error:', error);\r\n    return {\r\n      success: false,\r\n      error: error instanceof Error ? error.message : 'Unknown IPFS upload error'\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Upload JSON metadata to IPFS\r\n */\r\nexport const uploadMetadataToIPFS = async (\r\n  metadata: Record<string, any>,\r\n  config: IPFSConfig\r\n): Promise<IPFSUploadResult> => {\r\n  try {\r\n    if (!config.apiKey || !config.secretKey) {\r\n      throw new Error('IPFS API keys not configured. Please set REACT_APP_PINATA_API_KEY and REACT_APP_PINATA_SECRET_KEY');\r\n    }\r\n\r\n    const response = await fetch('https://api.pinata.cloud/pinning/pinJSONToIPFS', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'pinata_api_key': config.apiKey,\r\n        'pinata_secret_api_key': config.secretKey,\r\n      },\r\n      body: JSON.stringify({\r\n        pinataContent: metadata,\r\n        pinataMetadata: {\r\n          name: 'aura-nft-metadata.json'\r\n        }\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`IPFS metadata upload failed: ${response.statusText}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n\r\n    return {\r\n      success: true,\r\n      hash: result.IpfsHash,\r\n      url: `${config.gateway}${result.IpfsHash}`\r\n    };\r\n  } catch (error) {\r\n    console.error('IPFS metadata upload error:', error);\r\n    return {\r\n      success: false,\r\n      error: error instanceof Error ? error.message : 'Unknown IPFS metadata upload error'\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Get IPFS configuration from environment variables\r\n */\r\nexport const getIPFSConfig = (): IPFSConfig => {\r\n  return {\r\n    gateway: process.env.REACT_APP_IPFS_GATEWAY || 'https://gateway.pinata.cloud/ipfs/',\r\n    apiKey: process.env.REACT_APP_PINATA_API_KEY,\r\n    secretKey: process.env.REACT_APP_PINATA_SECRET_KEY\r\n  };\r\n};\r\n\r\n/**\r\n * Create NFT metadata JSON\r\n */\r\nexport const createNFTMetadata = (\r\n  name: string,\r\n  description: string,\r\n  imageUrl: string,\r\n  attributes: Record<string, any>[]\r\n): Record<string, any> => {\r\n  return {\r\n    name,\r\n    description,\r\n    image: imageUrl,\r\n    attributes,\r\n    external_url: window.location.origin,\r\n    created_at: new Date().toISOString()\r\n  };\r\n};\r\n"],"names":["uploadToIPFS","async","file","config","apiKey","secretKey","Error","formData","FormData","append","response","fetch","method","headers","body","ok","concat","statusText","result","json","success","hash","IpfsHash","url","gateway","error","console","message","uploadMetadataToIPFS","metadata","JSON","stringify","pinataContent","pinataMetadata","name","getIPFSConfig","process","REACT_APP_PINATA_API_KEY","REACT_APP_PINATA_SECRET_KEY","createNFTMetadata","description","imageUrl","attributes","image","external_url","window","location","origin","created_at","Date","toISOString"],"sourceRoot":""}
{"version":3,"file":"static/js/891.151556b9.chunk.js","mappings":"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","sources":["utils/aptosExplorer.ts","utils/networkUtils.ts","components/AuraPage.tsx"],"sourcesContent":["/**\r\n * Utility functions for Aptos blockchain explorer integration\r\n */\r\n\r\n/**\r\n * Generate the appropriate explorer URL based on network configuration\r\n */\r\nexport const getAptosExplorerUrl = (transactionHash: string): string => {\r\n  // Get network from environment variables\r\n  const network = process.env.REACT_APP_APTOS_NETWORK || 'devnet';\r\n  \r\n  // Generate the appropriate explorer URL based on network\r\n  switch (network.toLowerCase()) {\r\n    case 'mainnet':\r\n      return `https://explorer.aptoslabs.com/txn/${transactionHash}?network=mainnet`;\r\n    case 'testnet':\r\n      return `https://explorer.aptoslabs.com/txn/${transactionHash}?network=testnet`;\r\n    case 'devnet':\r\n    default:\r\n      return `https://explorer.aptoslabs.com/txn/${transactionHash}?network=devnet`;\r\n  }\r\n};\r\n\r\n/**\r\n * Open the transaction in the Aptos explorer in a new tab\r\n */\r\nexport const openTransactionInExplorer = (transactionHash: string): void => {\r\n  const explorerUrl = getAptosExplorerUrl(transactionHash);\r\n  window.open(explorerUrl, '_blank', 'noopener,noreferrer');\r\n};\r\n\r\n/**\r\n * Get the network name for display purposes\r\n */\r\nexport const getNetworkDisplayName = (): string => {\r\n  const network = process.env.REACT_APP_APTOS_NETWORK || 'devnet';\r\n  \r\n  switch (network.toLowerCase()) {\r\n    case 'mainnet':\r\n      return 'Mainnet';\r\n    case 'testnet':\r\n      return 'Testnet';\r\n    case 'devnet':\r\n    default:\r\n      return 'Devnet';\r\n  }\r\n};","/**\r\n * Network utilities for Aptos blockchain operations\r\n */\r\n\r\nimport { ValidationResult } from '../types/app';\r\n\r\nexport interface NetworkInfo {\r\n  name: string;\r\n  chainId?: string;\r\n  url?: string;\r\n}\r\n\r\nexport interface NetworkCheckResult {\r\n  isCompatible: boolean;\r\n  expected: string;\r\n  actual: string | null;\r\n  warning?: string;\r\n}\r\n\r\n/**\r\n * Get the expected network from environment configuration\r\n */\r\nexport const getExpectedNetwork = (): string => {\r\n  return (process.env.REACT_APP_APTOS_NETWORK as string) || 'devnet';\r\n};\r\n\r\n/**\r\n * Get current network from wallet\r\n */\r\nexport const getCurrentNetwork = async (): Promise<string | null> => {\r\n  try {\r\n    if ((window as any).aptos?.network) {\r\n      const networkInfo = await (window as any).aptos.network();\r\n      return networkInfo?.name || networkInfo || null;\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    console.warn('Failed to get current network:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Check if current network matches expected network\r\n */\r\nexport const checkNetworkCompatibility = async (): Promise<NetworkCheckResult> => {\r\n  const expected = getExpectedNetwork();\r\n  const actual = await getCurrentNetwork();\r\n  \r\n  if (!actual) {\r\n    return {\r\n      isCompatible: true, // Assume compatible if we can't detect\r\n      expected,\r\n      actual,\r\n      warning: 'Could not detect wallet network'\r\n    };\r\n  }\r\n  \r\n  const isCompatible = actual.toLowerCase().includes(expected.toLowerCase()) ||\r\n                      expected.toLowerCase().includes(actual.toLowerCase());\r\n  \r\n  return {\r\n    isCompatible,\r\n    expected,\r\n    actual,\r\n    warning: isCompatible ? undefined : `Please switch to ${expected.toUpperCase()} network`\r\n  };\r\n};\r\n\r\n/**\r\n * Validate network connection and compatibility\r\n */\r\nexport const validateNetworkConnection = async (): Promise<ValidationResult> => {\r\n  // Check internet connectivity\r\n  if (!navigator.onLine) {\r\n    return {\r\n      isValid: false,\r\n      error: 'No internet connection. Please check your network connection.'\r\n    };\r\n  }\r\n  \r\n  try {\r\n    const networkCheck = await checkNetworkCompatibility();\r\n    \r\n    if (!networkCheck.isCompatible) {\r\n      return {\r\n        isValid: false,\r\n        error: `Network mismatch: Expected ${networkCheck.expected}, but wallet is on ${networkCheck.actual}. ${networkCheck.warning || ''}`\r\n      };\r\n    }\r\n    \r\n    return { isValid: true };\r\n  } catch (error) {\r\n    return {\r\n      isValid: false,\r\n      error: `Network validation failed: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Get user-friendly network display names\r\n */\r\nexport const getNetworkDisplayName = (network?: string): string => {\r\n  const networkName = network || getExpectedNetwork();\r\n  \r\n  switch (networkName.toLowerCase()) {\r\n    case 'devnet':\r\n      return 'Devnet';\r\n    case 'testnet':\r\n      return 'Testnet';\r\n    case 'mainnet':\r\n      return 'Mainnet';\r\n    default:\r\n      return networkName.charAt(0).toUpperCase() + networkName.slice(1);\r\n  }\r\n};\r\n\r\n/**\r\n * Check if we're on a test network (devnet/testnet)\r\n */\r\nexport const isTestNetwork = (network?: string): boolean => {\r\n  const networkName = (network || getExpectedNetwork()).toLowerCase();\r\n  return networkName === 'devnet' || networkName === 'testnet';\r\n};\r\n\r\n/**\r\n * Get appropriate explorer URL for current network\r\n */\r\nexport const getExplorerUrl = (network?: string): string => {\r\n  const networkName = (network || getExpectedNetwork()).toLowerCase();\r\n  \r\n  switch (networkName) {\r\n    case 'mainnet':\r\n      return 'https://explorer.aptoslabs.com';\r\n    case 'testnet':\r\n      return 'https://explorer.aptoslabs.com/?network=testnet';\r\n    case 'devnet':\r\n    default:\r\n      return 'https://explorer.aptoslabs.com/?network=devnet';\r\n  }\r\n};\r\n\r\n/**\r\n * Monitor network changes and notify callback\r\n */\r\nexport const monitorNetworkChanges = (\r\n  callback: (networkInfo: NetworkCheckResult) => void,\r\n  intervalMs: number = 5000\r\n): () => void => {\r\n  let currentNetwork: string | null = null;\r\n  \r\n  const checkNetwork = async () => {\r\n    try {\r\n      const networkCheck = await checkNetworkCompatibility();\r\n      \r\n      if (networkCheck.actual !== currentNetwork) {\r\n        currentNetwork = networkCheck.actual;\r\n        callback(networkCheck);\r\n      }\r\n    } catch (error) {\r\n      console.warn('Network monitoring error:', error);\r\n    }\r\n  };\r\n  \r\n  // Initial check\r\n  checkNetwork();\r\n  \r\n  // Set up interval\r\n  const intervalId = setInterval(checkNetwork, intervalMs);\r\n  \r\n  // Return cleanup function\r\n  return () => clearInterval(intervalId);\r\n};","import React, { Suspense, lazy, useCallback } from 'react';\r\nimport { useWallet } from '@aptos-labs/wallet-adapter-react';\r\nimport Header from '../components/Header';\r\nimport { useAppContext } from '../contexts/AppContext';\r\nimport { openTransactionInExplorer, getNetworkDisplayName } from '../utils/aptosExplorer';\r\nimport { checkNetworkCompatibility } from '../utils/networkUtils';\r\n\r\n// Lazy load the heavy AuraGenerator component\r\nconst AuraGenerator = lazy(() => import('../AuraGenerator'));\r\n\r\nconst AuraPage: React.FC = () => {\r\n  const { account, signAndSubmitTransaction } = useWallet();\r\n  const { state, setImageData, setLoading, setTransactionHash } = useAppContext();\r\n\r\n  // Memoize the image callback to prevent unnecessary re-renders\r\n  const handleImageGenerated = useCallback((imageData: string) => {\r\n    setImageData(imageData);\r\n    // Clear any previous transaction hash when a new aura is generated\r\n    setTransactionHash('');\r\n  }, [setImageData, setTransactionHash]);\r\n\r\n  const mapTransactionError = (error: any): { message: string; type: 'error' | 'warning' | 'info' } => {\r\n    const errorMsg = error?.message || error?.toString() || '';\r\n    const errorCode = error?.code || error?.status;\r\n    \r\n    // Aptos-specific transaction errors\r\n    if (errorMsg.includes('INSUFFICIENT_BALANCE_FOR_TRANSACTION_FEE') || errorMsg.includes('insufficient funds')) {\r\n      return {\r\n        message: 'Insufficient APT balance for gas fees. Please add more APT to your wallet.',\r\n        type: 'error'\r\n      };\r\n    }\r\n    \r\n    if (errorMsg.includes('SEQUENCE_NUMBER_TOO_OLD') || errorMsg.includes('sequence number')) {\r\n      return {\r\n        message: 'Transaction sequence error. Please refresh your wallet and try again.',\r\n        type: 'warning'\r\n      };\r\n    }\r\n    \r\n    if (errorMsg.includes('TRANSACTION_EXPIRED') || errorMsg.includes('expired')) {\r\n      return {\r\n        message: 'Transaction expired due to network delay. Please try again.',\r\n        type: 'warning'\r\n      };\r\n    }\r\n    \r\n    if (errorMsg.includes('INVALID_SIGNATURE') || errorMsg.includes('signature')) {\r\n      return {\r\n        message: 'Invalid signature. Please check your wallet connection and try again.',\r\n        type: 'error'\r\n      };\r\n    }\r\n    \r\n    if (errorMsg.includes('MODULE_NOT_FOUND') || errorMsg.includes('module')) {\r\n      return {\r\n        message: 'Smart contract not found. Please ensure you are on the correct network (Devnet).',\r\n        type: 'error'\r\n      };\r\n    }\r\n    \r\n    if (errorMsg.includes('FUNCTION_NOT_FOUND') || errorMsg.includes('function')) {\r\n      return {\r\n        message: 'Contract function not available. The smart contract may need updating.',\r\n        type: 'error'\r\n      };\r\n    }\r\n    \r\n    if (errorMsg.includes('INVALID_ARGUMENT') || errorMsg.includes('argument')) {\r\n      return {\r\n        message: 'Invalid transaction parameters. Please refresh and try again.',\r\n        type: 'error'\r\n      };\r\n    }\r\n    \r\n    if (errorMsg.includes('rejected') || errorMsg.includes('denied') || errorMsg.includes('cancelled')) {\r\n      return {\r\n        message: 'Transaction was rejected. Please approve the transaction to continue.',\r\n        type: 'warning'\r\n      };\r\n    }\r\n    \r\n    if (errorMsg.includes('network') || errorMsg.includes('connection') || errorMsg.includes('timeout')) {\r\n      return {\r\n        message: 'Network connection issue. Please check your internet connection and try again.',\r\n        type: 'warning'\r\n      };\r\n    }\r\n    \r\n    if (errorMsg.includes('gas') || errorMsg.includes('Gas')) {\r\n      return {\r\n        message: 'Gas estimation failed. Please try again with a higher gas limit.',\r\n        type: 'error'\r\n      };\r\n    }\r\n    \r\n    // Rate limiting or server errors\r\n    if (errorCode === 429 || errorMsg.includes('rate limit') || errorMsg.includes('too many requests')) {\r\n      return {\r\n        message: 'Too many requests. Please wait a moment and try again.',\r\n        type: 'warning'\r\n      };\r\n    }\r\n    \r\n    // Fallback for unknown errors\r\n    return {\r\n      message: `Transaction failed: ${errorMsg || 'Unknown error occurred'}`,\r\n      type: 'error'\r\n    };\r\n  };\r\n  \r\n\r\n\r\n  const showError = (message: string, type: 'error' | 'warning' | 'info' = 'error') => {\r\n    console.error(`${type.toUpperCase()}: ${message}`);\r\n    \r\n    // Create and show notification element\r\n    const notification = document.createElement('div');\r\n    notification.className = `notification notification-${type}`;\r\n    notification.style.cssText = `\r\n      position: fixed;\r\n      top: 20px;\r\n      right: 20px;\r\n      background: ${type === 'error' ? '#ff4444' : type === 'warning' ? '#ffaa00' : '#0099ff'};\r\n      color: white;\r\n      padding: 16px 24px;\r\n      border-radius: 8px;\r\n      box-shadow: 0 4px 12px rgba(0,0,0,0.15);\r\n      z-index: 10000;\r\n      max-width: 400px;\r\n      animation: slideIn 0.3s ease-out;\r\n    `;\r\n    notification.textContent = message;\r\n    \r\n    document.body.appendChild(notification);\r\n    \r\n    // Auto-remove after 5 seconds\r\n    setTimeout(() => {\r\n      if (notification.parentNode) {\r\n        notification.style.animation = 'slideOut 0.3s ease-out';\r\n        setTimeout(() => notification.remove(), 300);\r\n      }\r\n    }, 5000);\r\n  };\r\n\r\n  const showSuccess = (title: string, message: string) => {\r\n    // Success handling - could be extended with toast notifications\r\n  };\r\n\r\n  const mintNFT = async () => {\r\n    // Load validation utilities and API service dynamically\r\n    const [validationUtils, apiService] = await Promise.all([\r\n      import('../utils/validation'),\r\n      import('../services/ipfsService')\r\n    ]);\r\n\r\n    const { validateWalletConnection, validateMoodSeed, validateTransactionCount, validateImageData } = validationUtils;\r\n    const { apiService: api, createNFTMetadata, isStorageAvailable } = apiService;\r\n\r\n    // Check network compatibility first\r\n    const networkCheck = await checkNetworkCompatibility();\r\n    if (!networkCheck.isCompatible) {\r\n      showError(\r\n        `Network mismatch detected. Please switch your wallet to ${networkCheck.expected} network. Currently on: ${networkCheck.actual || 'unknown'}`,\r\n        'error'\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Validation checks\r\n    const walletValidation = validateWalletConnection(account?.address?.toString());\r\n    if (!walletValidation.isValid) {\r\n      showError(walletValidation.error!, 'warning');\r\n      return;\r\n    }\r\n\r\n    const moodValidation = validateMoodSeed(state.moodSeed);\r\n    if (!moodValidation.isValid) {\r\n      showError(moodValidation.error!, 'warning');\r\n      return;\r\n    }\r\n\r\n    const countValidation = validateTransactionCount(state.transactionCount);\r\n    if (!countValidation.isValid) {\r\n      showError(countValidation.error!, 'error');\r\n      return;\r\n    }\r\n\r\n    const imageValidation = validateImageData(state.imageData);\r\n    if (!imageValidation.isValid) {\r\n      showError(imageValidation.error!, 'warning');\r\n      return;\r\n    }\r\n\r\n    // Check if storage service is available\r\n    const storageAvailable = await isStorageAvailable();\r\n\r\n    if (!storageAvailable) {\r\n      // Show warning but continue with placeholder URI\r\n      showError('Storage service not available. Using demo mode for NFT minting.', 'warning');\r\n    }\r\n\r\n    setLoading(true);\r\n    \r\n    // Clear any previous transaction hash\r\n    setTransactionHash('');\r\n\r\n    try {\r\n      const tokenName = `Aura-${state.moodSeed.replace(/[^a-zA-Z0-9]/g, '')}-${Date.now()}`;\r\n      const description = `Personal aura NFT generated from ${state.transactionCount} transactions with mood \"${state.moodSeed}\"`;\r\n\r\n      let uri: string;\r\n\r\n      if (storageAvailable) {\r\n        // Convert imageData to blob for upload\r\n        const imageBlob = await fetch(state.imageData).then(r => r.blob());\r\n\r\n        console.log('Uploading your aura NFT to IPFS...');\r\n\r\n        // Create metadata first (without image URL)\r\n        const metadata = createNFTMetadata(\r\n          tokenName,\r\n          description,\r\n          '', // Image URL will be set by backend\r\n          [\r\n            { trait_type: 'Mood', value: state.moodSeed },\r\n            { trait_type: 'Transaction Count', value: state.transactionCount.toString() },\r\n            { trait_type: 'Generated At', value: new Date().toISOString() },\r\n            { trait_type: 'Generator', value: 'Aptos Aura Weaver v1.0' }\r\n          ]\r\n        );\r\n\r\n        // Upload complete NFT (image + metadata) in one call\r\n        const uploadResult = await api.uploadNFT({\r\n          imageFile: imageBlob,\r\n          metadata\r\n        });\r\n\r\n        if (!uploadResult.success) {\r\n          throw new Error(`NFT upload failed: ${uploadResult.error}`);\r\n        }\r\n\r\n        uri = uploadResult.url!;\r\n\r\n        console.log('🎨 Minting NFT with parameters:', {\r\n          tokenName,\r\n          moodSeed: state.moodSeed,\r\n          transactionCount: state.transactionCount,\r\n          uri,\r\n          ...(uploadResult.imageHash && { imageHash: uploadResult.imageHash }),\r\n          ...(uploadResult.hash && { metadataHash: uploadResult.hash })\r\n        });\r\n      } else {\r\n        // Use simple placeholder URI for demo (short enough for blockchain)\r\n        console.log('Creating your aura NFT with demo metadata...');\r\n\r\n        // Use a simple HTTP URL instead of long data URI\r\n        const demoUri = `https://demo.aura-aptos.com/nft/${tokenName.replace(/[^a-zA-Z0-9]/g, '')}`;\r\n        uri = demoUri;\r\n\r\n        console.log('🎨 Minting NFT with parameters (Demo Mode):', {\r\n          tokenName,\r\n          moodSeed: state.moodSeed,\r\n          transactionCount: state.transactionCount,\r\n          uri: demoUri\r\n        });\r\n      }\r\n\r\n      // Add minting started log\r\n      console.log(`Minting Started: Creating your aura NFT \"${tokenName}\"...`);\r\n\r\n      // Execute the actual smart contract transaction using wallet adapter\r\n      const response = await signAndSubmitTransaction({\r\n        data: {\r\n          function: \"0x0b65f8046e689981c490d760553a03b9d11775d03d78c141d6a44041c3b12a43::aura_nft::mint_aura\",\r\n          functionArguments: [state.moodSeed, state.transactionCount, tokenName, uri],\r\n        },\r\n        options: {\r\n          maxGasAmount: 10000,\r\n          gasUnitPrice: 100,\r\n        }\r\n      });\r\n      console.log('🎨 Transaction submitted:', response.hash);\r\n\r\n      // Wait for transaction to be processed\r\n      const aptosSDK = await import('@aptos-labs/ts-sdk');\r\n      const network = (process.env.REACT_APP_APTOS_NETWORK as any) || aptosSDK.Network.DEVNET;\r\n      const nodeUrl = process.env.REACT_APP_APTOS_NODE_URL || undefined;\r\n\r\n      const aptosConfig = new aptosSDK.AptosConfig({\r\n        network,\r\n        fullnode: nodeUrl\r\n      });\r\n      const aptos = new aptosSDK.Aptos(aptosConfig);\r\n\r\n      const txResult = await aptos.waitForTransaction({\r\n        transactionHash: response.hash,\r\n      });\r\n\r\n      console.log('✅ Transaction confirmed:', txResult);\r\n\r\n      // Store the transaction hash in the app state\r\n      setTransactionHash(response.hash);\r\n\r\n      // Add success log\r\n      const demoMode = !storageAvailable;\r\n      const successMessage = demoMode\r\n        ? `Your aura NFT \"${tokenName}\" has been minted in demo mode! (Storage service not available)`\r\n        : `Your aura NFT has been minted with IPFS storage! View it on Aptos ${getNetworkDisplayName()}.`;\r\n      console.log(`NFT Minted Successfully: ${successMessage}`);\r\n\r\n      // Log detailed information for development\r\n      console.log('✅ NFT Minting Details:', {\r\n        tokenName,\r\n        description,\r\n        moodSeed: state.moodSeed,\r\n        transactionCount: state.transactionCount,\r\n        walletAddress: account?.address?.toString(),\r\n        imageDataSize: state.imageData.length,\r\n        transactionHash: response.hash,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n\r\n      alert(`Success: ${successMessage}`);\r\n\r\n    } catch (error: any) {\r\n      console.error('❌ Error minting NFT:', error);\r\n      \r\n      // Use comprehensive error mapping\r\n      const { message, type } = mapTransactionError(error);\r\n      showError(message, type);\r\n      \r\n      // Log detailed error for debugging\r\n      console.error('Detailed error info:', {\r\n        originalError: error,\r\n        errorMessage: error?.message,\r\n        errorCode: error?.code,\r\n        errorStatus: error?.status,\r\n        stack: error?.stack\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const downloadAura = () => {\r\n    if (!state.imageData) {\r\n      showError('No aura image available to download', 'warning');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const fileName = `aura-${state.moodSeed.replace(/[^a-zA-Z0-9]/g, '')}-${Date.now()}.png`;\r\n      const link = document.createElement('a');\r\n      link.download = fileName;\r\n      link.href = state.imageData;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n\r\n      showSuccess('Download Complete', `Aura image \"${fileName}\" downloaded successfully!`);\r\n    } catch (error) {\r\n      showError('Failed to download image', 'error');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <div className=\"app-content\">\r\n        <Header />\r\n\r\n        <main className=\"main-content aura-main-content\">\r\n          <div className=\"aura-section aura-section-compact\">\r\n            <div className=\"aura-generator-wrapper\">\r\n              <Suspense fallback={\r\n                <div className=\"aura-loading-fallback\">\r\n                  <div className=\"loading-spinner\"></div>\r\n                </div>\r\n              }>\r\n                <AuraGenerator\r\n                  moodSeed={state.moodSeed}\r\n                  transactionCount={state.transactionCount}\r\n                  onImageGenerated={handleImageGenerated}\r\n                />\r\n              </Suspense>\r\n            </div>\r\n\r\n            {state.imageData && (\r\n              <div className=\"aura-content-wrapper\">\r\n                {/* Action Buttons */}\r\n                <div className=\"action-buttons action-buttons-compact\">\r\n                  <button\r\n                    onClick={mintNFT}\r\n                    disabled={state.loading}\r\n                    className={`btn btn-primary btn-connect-wallet ${state.loading ? 'loading' : ''}`}\r\n                  >\r\n                    {state.loading && <span className=\"loading-spinner\"></span>}\r\n                    <span className=\"generate-text\">{state.loading ? 'Minting...' : 'Mint as NFT'}</span>\r\n                    <div className=\"generate-glow\"></div>\r\n                  </button>\r\n\r\n                  <button\r\n                    onClick={downloadAura}\r\n                    className=\"btn btn-primary btn-connect-wallet btn-download-aura\"\r\n                    title=\"Download your aura as PNG\"\r\n                  >\r\n                    <span className=\"generate-text\">Download</span>\r\n                    <div className=\"generate-glow\"></div>\r\n                  </button>\r\n\r\n                  {state.lastTransactionHash && state.lastTransactionHash.trim() !== '' && (\r\n                    <button\r\n                      onClick={() => openTransactionInExplorer(state.lastTransactionHash!)}\r\n                      className=\"btn btn-secondary btn-connect-wallet btn-explorer\"\r\n                      title={`View transaction on Aptos ${getNetworkDisplayName()}`}\r\n                    >\r\n                      <span className=\"generate-text\">View on Aptos {getNetworkDisplayName()}</span>\r\n                      <div className=\"generate-glow\"></div>\r\n                    </button>\r\n                  )}\r\n                </div>\r\n\r\n              </div>\r\n            )}\r\n          </div>\r\n        </main>\r\n        \r\n        <footer className=\"mvp-footer\">\r\n          <p className=\"mvp-note mvp-note-compact\">\r\n           Live on Aptos Devnet! Switch to Devnet in your wallet and faucet APT.\r\n          </p>\r\n        </footer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuraPage;"],"names":["getNetworkDisplayName","process","toLowerCase","checkNetworkCompatibility","async","expected","actual","_aptos","window","aptos","network","networkInfo","name","error","console","warn","getCurrentNetwork","isCompatible","warning","includes","undefined","concat","toUpperCase","AuraGenerator","lazy","AuraPage","account","signAndSubmitTransaction","useWallet","state","setImageData","setLoading","setTransactionHash","useAppContext","handleImageGenerated","useCallback","imageData","showError","message","type","arguments","length","notification","document","createElement","className","style","cssText","textContent","body","appendChild","setTimeout","parentNode","animation","remove","_jsx","children","_jsxs","Header","Suspense","fallback","moodSeed","transactionCount","onImageGenerated","onClick","_account$address","validationUtils","apiService","Promise","all","validateWalletConnection","validateMoodSeed","validateTransactionCount","validateImageData","api","createNFTMetadata","isStorageAvailable","networkCheck","walletValidation","address","toString","isValid","moodValidation","countValidation","imageValidation","storageAvailable","_account$address2","tokenName","replace","Date","now","description","uri","imageBlob","fetch","then","r","blob","log","metadata","trait_type","value","toISOString","uploadResult","uploadNFT","imageFile","success","Error","url","_objectSpread","imageHash","hash","metadataHash","demoUri","response","data","function","functionArguments","options","maxGasAmount","gasUnitPrice","aptosSDK","nodeUrl","aptosConfig","AptosConfig","fullnode","Aptos","txResult","waitForTransaction","transactionHash","successMessage","walletAddress","imageDataSize","timestamp","alert","errorMsg","errorCode","code","status","mapTransactionError","originalError","errorMessage","errorStatus","stack","disabled","loading","downloadAura","fileName","link","download","href","click","removeChild","title","lastTransactionHash","trim","explorerUrl","getAptosExplorerUrl","open","openTransactionInExplorer"],"sourceRoot":""}
"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[786],{8786:(a,t,e)=>{e.r(t),e.d(t,{apiService:()=>o,createNFTMetadata:()=>s,getIPFSConfig:()=>i,isStorageAvailable:()=>n,uploadMetadataToIPFS:()=>l,uploadToIPFS:()=>c});const r={getBackendUrl:()=>{const a="https://aptos-aura-weaver.up.railway.app";return a||"http://localhost:3001"},isDevelopment:()=>!1,getAllBackendUrls:()=>["https://aptos-aura-weaver.up.railway.app","http://localhost:3001","http://localhost:3001","http://localhost:3002"].filter(Boolean).filter(a=>"https://your-railway-app.up.railway.app"!==a)};const o=new class{constructor(){this.baseUrl=void 0,this.baseUrl=r.getBackendUrl()}async isAvailable(){try{if((await fetch("".concat(this.baseUrl,"/health"),{method:"GET",signal:AbortSignal.timeout(5e3)})).ok)return!0}catch(a){}return await this.tryFallbackUrls()}async tryFallbackUrls(){const a=r.getAllBackendUrls();for(const e of a)if(e!==this.baseUrl)try{if((await fetch("".concat(e,"/health"),{method:"GET",signal:AbortSignal.timeout(3e3)})).ok)return this.baseUrl=e,!0}catch(t){}return!1}async uploadNFT(a){try{const t=new FormData;t.append("image",a.imageFile),t.append("metadata",JSON.stringify(a.metadata));const e=await fetch("".concat(this.baseUrl,"/api/upload-nft"),{method:"POST",body:t});if(!e.ok)throw new Error("Upload failed: ".concat(e.statusText));const r=await e.json();if(!r.success)throw new Error(r.error||"Upload failed");return r}catch(t){return console.error("NFT upload error:",t),{success:!1,error:t instanceof Error?t.message:"Unknown upload error"}}}async uploadImage(a){try{const t=new FormData;t.append("file",a);const e=await fetch("".concat(this.baseUrl,"/api/upload-file"),{method:"POST",body:t});if(!e.ok)throw new Error("Image upload failed: ".concat(e.statusText));const r=await e.json();if(!r.success)throw new Error(r.error||"Image upload failed");return r}catch(t){return console.error("Image upload error:",t),{success:!1,error:t instanceof Error?t.message:"Unknown image upload error"}}}async uploadMetadata(a){try{const t=await fetch("".concat(this.baseUrl,"/api/upload-metadata"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({metadata:a})});if(!t.ok)throw new Error("Metadata upload failed: ".concat(t.statusText));const e=await t.json();if(!e.success)throw new Error(e.error||"Metadata upload failed");return e}catch(t){return console.error("Metadata upload error:",t),{success:!1,error:t instanceof Error?t.message:"Unknown metadata upload error"}}}},s=(a,t,e,r)=>({name:a,description:t,image:e,attributes:r,external_url:window.location.origin,created_at:(new Date).toISOString()}),n=async()=>await o.isAvailable(),c=o.uploadImage.bind(o),l=o.uploadMetadata.bind(o),i=()=>({configured:!0})}}]);
//# sourceMappingURL=786.7eac8dff.chunk.js.map
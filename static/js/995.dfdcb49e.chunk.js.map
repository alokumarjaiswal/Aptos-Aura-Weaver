{"version":3,"file":"static/js/995.dfdcb49e.chunk.js","mappings":"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","sources":["components/WalletPage.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useWallet } from '@aptos-labs/wallet-adapter-react';\r\nimport Header from '../components/Header';\r\nimport { useAppContext } from '../contexts/AppContext';\r\n\r\nconst WalletPage: React.FC = () => {\r\n  const { account, disconnect } = useWallet();\r\n  const navigate = useNavigate();\r\n  const { state, setMoodSeed, setTransactionCount, setLoading } = useAppContext();\r\n  const [localLoading, setLocalLoading] = useState(false);\r\n  const [copied, setCopied] = useState(false);\r\n  const [autoFetched, setAutoFetched] = useState(false);\r\n\r\n  const checkNetworkCompatibility = async (): Promise<boolean> => {\r\n    try {\r\n      const expectedNetwork = (process.env.REACT_APP_APTOS_NETWORK as string) || 'devnet';\r\n      \r\n      // Check if wallet network matches expected network\r\n      if ((window as any).aptos?.network) {\r\n        const walletNetwork = await (window as any).aptos.network();\r\n        const actualNetwork = walletNetwork?.name || walletNetwork;\r\n        \r\n        if (actualNetwork && !actualNetwork.toLowerCase().includes(expectedNetwork.toLowerCase())) {\r\n          alert(`Network Warning: Please switch your wallet to ${expectedNetwork.toUpperCase()} network. Currently connected to: ${actualNetwork}`);\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    } catch (error) {\r\n      console.warn('Network compatibility check failed:', error);\r\n      return true; // Continue if check fails\r\n    }\r\n  };\r\n\r\n  const fetchUserData = useCallback(async () => {\r\n    if (!account?.address) return;\r\n\r\n    // Check network compatibility before fetching data\r\n    const networkOk = await checkNetworkCompatibility();\r\n    if (!networkOk) {\r\n      return; // Stop if network mismatch\r\n    }\r\n\r\n    setLocalLoading(true);\r\n    setLoading(true);\r\n\r\n    try {\r\n      // Import Aptos SDK dynamically\r\n      const { Aptos, AptosConfig, Network } = await import('@aptos-labs/ts-sdk');\r\n\r\n      const network = (process.env.REACT_APP_APTOS_NETWORK as any) || Network.DEVNET;\r\n      const nodeUrl = process.env.REACT_APP_APTOS_NODE_URL || undefined;\r\n\r\n      const aptosConfig = new AptosConfig({\r\n        network,\r\n        fullnode: nodeUrl\r\n      });\r\n      const aptos = new Aptos(aptosConfig);\r\n\r\n      const addressString = account.address.toString();\r\n      const accountData = await aptos.getAccountInfo({ accountAddress: addressString });\r\n\r\n      if (!accountData || typeof accountData.sequence_number === 'undefined') {\r\n        throw new Error('Invalid response from Aptos node');\r\n      }\r\n\r\n      const txCount = parseInt(accountData.sequence_number);\r\n      setTransactionCount(txCount);\r\n\r\n      if (txCount === 0) {\r\n        alert('Your account has no transactions yet. You can still create an aura!');\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching user data:', error);\r\n      \r\n      const errorMsg = error?.message || error?.toString() || '';\r\n\r\n      if (errorMsg.includes('not found') || errorMsg.includes('Invalid response')) {\r\n        setTransactionCount(0);\r\n        alert('Account not found on Aptos network. This is normal for new accounts. Using transaction count: 0');\r\n      } else if (errorMsg.includes('network') || errorMsg.includes('fetch') || !navigator.onLine) {\r\n        alert('Network error. Please check your internet connection and try again.');\r\n      } else if (errorMsg.includes('timeout') || errorMsg.includes('TIMEOUT')) {\r\n        alert('Request timed out. The network may be slow. Please try again.');\r\n      } else if (errorMsg.includes('rate limit') || errorMsg.includes('429')) {\r\n        alert('Too many requests. Please wait a moment and try again.');\r\n      } else if (errorMsg.includes('CORS') || errorMsg.includes('cors')) {\r\n        alert('Connection blocked by browser security. Please try refreshing the page.');\r\n      } else if (errorMsg.includes('Unauthorized') || errorMsg.includes('401')) {\r\n        alert('Authorization error. Please reconnect your wallet.');\r\n      } else {\r\n        alert(`Unable to fetch account data: ${errorMsg}. Using demo values for now.`);\r\n        setTransactionCount(Math.floor(Math.random() * 50) + 5);\r\n      }\r\n    } finally {\r\n      setLocalLoading(false);\r\n      setLoading(false);\r\n    }\r\n  }, [account, setTransactionCount, setLoading]);\r\n\r\n  // Auto-fetch transaction data when wallet is connected\r\n  useEffect(() => {\r\n    if (account?.address && !autoFetched && state.transactionCount === 0 && !localLoading) {\r\n      setAutoFetched(true);\r\n      fetchUserData();\r\n    }\r\n  }, [account?.address, autoFetched, state.transactionCount, localLoading, fetchUserData]);\r\n\r\n  // Reset auto-fetch state when wallet disconnects\r\n  useEffect(() => {\r\n    if (!account?.address) {\r\n      setAutoFetched(false);\r\n    }\r\n  }, [account?.address]);\r\n\r\n  const handleContinue = () => {\r\n    if (state.moodSeed.trim()) {\r\n      navigate('/aura');\r\n    } else {\r\n      alert('Please enter a mood seed to continue.');\r\n    }\r\n  };\r\n\r\n  const handleCopyAddress = async () => {\r\n    if (account?.address) {\r\n      try {\r\n        await navigator.clipboard.writeText(account.address.toString());\r\n        setCopied(true);\r\n        setTimeout(() => setCopied(false), 2000);\r\n      } catch (error) {\r\n        console.error('Failed to copy address:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <div className=\"app-content\">\r\n        <Header />\r\n        \r\n        <main className=\"main-content\">\r\n          <div className=\"wallet-section\">\r\n            <div className=\"wallet-main\">\r\n              <div className=\"wallet-header-info\">\r\n                <div className=\"wallet-address-display\">\r\n                  <span \r\n                    className={`address-value ${copied ? 'copied' : ''}`} \r\n                    onClick={handleCopyAddress}\r\n                    style={{ cursor: 'pointer' }}\r\n                  >\r\n                    {account?.address?.toString()}\r\n                    <svg className=\"copy-icon\" width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                      <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\r\n                      <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\r\n                    </svg>\r\n                    <svg className={`checkmark-icon ${copied ? 'visible' : ''}`} width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                      <polyline points=\"20,6 9,17 4,12\"></polyline>\r\n                    </svg>\r\n                  </span>\r\n                </div>\r\n                <button\r\n                  onClick={disconnect}\r\n                  className=\"disconnect-btn\"\r\n                  title=\"Disconnect Wallet\"\r\n                >\r\n                  <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                    <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\r\n                    <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\r\n                  </svg>\r\n                </button>\r\n              </div>\r\n              \r\n              <div className=\"mood-input-section\">\r\n                <div className=\"mood-input-container\">\r\n                  <label className=\"mood-label\">Your Mood Seed</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={state.moodSeed}\r\n                    onChange={(e) => setMoodSeed(e.target.value)}\r\n                    onFocus={(e) => e.target.select()}\r\n                    placeholder=\"\"\r\n                    className=\"mood-input\"\r\n                    spellCheck={false}\r\n                    autoComplete=\"off\"\r\n                    autoCorrect=\"off\"\r\n                    autoCapitalize=\"off\"\r\n                  />\r\n                </div>\r\n                \r\n                <div className=\"data-fetch-section\">\r\n                  <button\r\n                    onClick={() => {\r\n                      setAutoFetched(false);\r\n                      fetchUserData();\r\n                    }}\r\n                    disabled={localLoading}\r\n                    className=\"sync-btn\"\r\n                    title=\"Refresh transaction data\"\r\n                  >\r\n                    <svg className={`sync-icon ${localLoading ? 'rotating' : ''}`} width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                      <polyline points=\"23,4 23,10 17,10\"></polyline>\r\n                      <polyline points=\"1,20 1,14 7,14\"></polyline>\r\n                      <path d=\"M20.49,9A9,9,0,0,0,5.64,5.64L1,10m22,4l-4.64,4.36A9,9,0,0,1,3.51,15\"></path>\r\n                    </svg>\r\n                  </button>\r\n                  <span className=\"tx-count\">Tx: {state.transactionCount}</span>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"generate-section\">\r\n                <button\r\n                  onClick={handleContinue}\r\n                  disabled={!state.moodSeed.trim() || state.transactionCount < 0}\r\n                  className=\"btn btn-primary btn-connect-wallet\"\r\n                >\r\n                  <span className=\"generate-text\">Generate My Aura</span>\r\n                  <div className=\"generate-glow\"></div>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WalletPage;"],"names":["WalletPage","_account$address","account","disconnect","useWallet","navigate","useNavigate","state","setMoodSeed","setTransactionCount","setLoading","useAppContext","localLoading","setLocalLoading","useState","copied","setCopied","autoFetched","setAutoFetched","fetchUserData","useCallback","async","address","_aptos","expectedNetwork","process","window","aptos","network","walletNetwork","actualNetwork","name","toLowerCase","includes","alert","concat","toUpperCase","error","console","warn","checkNetworkCompatibility","Aptos","AptosConfig","Network","fullnode","addressString","toString","accountData","getAccountInfo","accountAddress","sequence_number","Error","txCount","parseInt","errorMsg","message","navigator","onLine","Math","floor","random","useEffect","transactionCount","_jsx","className","children","_jsxs","Header","onClick","clipboard","writeText","setTimeout","style","cursor","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x","y","rx","ry","d","points","title","x1","y1","x2","y2","type","value","moodSeed","onChange","e","target","onFocus","select","placeholder","spellCheck","autoComplete","autoCorrect","autoCapitalize","disabled","handleContinue","trim"],"sourceRoot":""}
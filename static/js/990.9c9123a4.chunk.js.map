{"version":3,"file":"static/js/990.9c9123a4.chunk.js","mappings":"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","sources":["AuraGenerator.tsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\n\r\n// Dynamically import p5 to reduce initial bundle size\r\nconst loadP5 = () => import('p5');\r\n\r\ninterface AuraGeneratorProps {\r\n  moodSeed: string;\r\n  transactionCount: number;\r\n  onImageGenerated: (imageData: string) => void;\r\n}\r\n\r\nconst AuraGenerator: React.FC<AuraGeneratorProps> = ({\r\n  moodSeed,\r\n  transactionCount,\r\n  onImageGenerated\r\n}) => {\r\n  const p5ContainerRef = useRef<HTMLDivElement>(null);\r\n  const p5InstanceRef = useRef<any>(null);\r\n  const isGeneratingRef = useRef<boolean>(false);\r\n  const hasGeneratedRef = useRef<boolean>(false);\r\n  const onImageGeneratedRef = useRef(onImageGenerated);\r\n\r\n  // Update callback ref when it changes\r\n  useEffect(() => {\r\n    onImageGeneratedRef.current = onImageGenerated;\r\n  }, [onImageGenerated]);\r\n\r\n  useEffect(() => {\r\n    // Prevent multiple generations\r\n    if (!p5ContainerRef.current || !moodSeed || isGeneratingRef.current) return;\r\n    \r\n    // Clean up existing instance\r\n    if (p5InstanceRef.current) {\r\n      p5InstanceRef.current.remove();\r\n      p5InstanceRef.current = null;\r\n    }\r\n    \r\n    // Reset generation state\r\n    hasGeneratedRef.current = false;\r\n    isGeneratingRef.current = true;\r\n\r\n    const initializeP5 = async () => {\r\n      const p5Module = await loadP5();\r\n      const p5 = p5Module.default;\r\n\r\n      const sketch = (p: any) => {\r\n      let particles: any[] = [];\r\n      let waveforms: any[] = [];\r\n      \r\n      // Advanced mood-based color palettes\r\n      const moodPalettes: { [key: string]: number[][] } = {\r\n        happy: [[255, 223, 0], [255, 165, 0], [255, 69, 0]], // Warm yellows/oranges\r\n        calm: [[64, 224, 208], [0, 191, 255], [138, 43, 226]], // Cool blues/purples\r\n        energetic: [[255, 20, 147], [255, 0, 255], [255, 105, 180]], // Vibrant magentas\r\n        peaceful: [[144, 238, 144], [152, 251, 152], [173, 255, 47]], // Soft greens\r\n        mysterious: [[75, 0, 130], [138, 43, 226], [72, 61, 139]], // Deep purples\r\n        passionate: [[220, 20, 60], [255, 69, 0], [255, 140, 0]], // Reds/oranges\r\n        default: [[100, 149, 237], [65, 105, 225], [30, 144, 255]] // Blue spectrum\r\n      };\r\n\r\n      const getMoodPalette = (seed: string): number[][] => {\r\n        const lowerSeed = seed.toLowerCase();\r\n        for (const [mood, colors] of Object.entries(moodPalettes)) {\r\n          if (lowerSeed.includes(mood) || lowerSeed.includes(mood.slice(0, 4))) {\r\n            return colors;\r\n          }\r\n        }\r\n        return moodPalettes.default;\r\n      };\r\n      \r\n      // Calculate seed hash for deterministic generation\r\n      const seedHash = moodSeed.split('').reduce((a, b) => a + b.charCodeAt(0), 0);\r\n      const palette = getMoodPalette(moodSeed);\r\n      \r\n      p.setup = () => {\r\n        const canvas = p.createCanvas(150, 150);\r\n        p.colorMode(p.RGB);\r\n        \r\n        const particleCount = Math.min(Math.max(transactionCount, 5) + 10, 35); // Reduced for static generation\r\n        \r\n        // Generate static particles with deterministic properties\r\n        for (let i = 0; i < particleCount; i++) {\r\n          const colorIndex = i % palette.length;\r\n          const [r, g, b] = palette[colorIndex];\r\n          \r\n          particles.push({\r\n            x: p.width / 2,\r\n            y: p.height / 2,\r\n            angle: (i / particleCount) * p.TWO_PI + (seedHash * 0.01),\r\n            baseRadius: 40 + (i % 4) * 20,\r\n            radiusVariation: 15 + (i % 3) * 10,\r\n            size: 4 + (i % 3) * 2,\r\n            r: Math.min(255, r + (seedHash + i * 23) % 40),\r\n            g: Math.min(255, g + (seedHash + i * 37) % 40),\r\n            b: Math.min(255, b + (seedHash + i * 41) % 40),\r\n            phaseOffset: i * 0.2,\r\n            type: i % 3 // 0: orbiting, 1: spiral, 2: wave\r\n          });\r\n        }\r\n        \r\n        // Generate static background waveforms\r\n        const waveCount = Math.floor(transactionCount / 15) + 2;\r\n        for (let i = 0; i < Math.min(waveCount, 5); i++) {\r\n          waveforms.push({\r\n            amplitude: 20 + i * 8,\r\n            phase: i * p.PI * 0.4 + seedHash * 0.01,\r\n            color: palette[i % palette.length],\r\n            alpha: 25 + i * 8\r\n          });\r\n        }\r\n        \r\n        // Draw static aura once\r\n        drawStaticAura();\r\n        \r\n        // Capture image after brief delay for rendering (only once)\r\n        if (!hasGeneratedRef.current) {\r\n          hasGeneratedRef.current = true;\r\n          setTimeout(() => {\r\n            if (canvas && canvas.canvas) {\r\n              const imageData = canvas.canvas.toDataURL('image/png');\r\n              onImageGeneratedRef.current(imageData);\r\n            }\r\n            isGeneratingRef.current = false;\r\n          }, 150);\r\n        }\r\n      };\r\n\r\n      const drawStaticAura = () => {\r\n        // Clear background\r\n        p.background(0);\r\n        \r\n        // Create static radial gradient background\r\n        for (let r = 150; r > 0; r -= 3) {\r\n          const inter = p.map(r, 0, 150, 0, 1);\r\n          const alpha = 255 * (1 - inter * 0.7);\r\n          const baseColor = palette[0];\r\n          p.fill(baseColor[0] * 0.15, baseColor[1] * 0.15, baseColor[2] * 0.15, alpha * 0.3);\r\n          p.noStroke();\r\n          p.ellipse(p.width / 2, p.height / 2, r, r);\r\n        }\r\n        \r\n        // Draw static background waveforms\r\n        waveforms.forEach((wave, index) => {\r\n          const [r, g, b] = wave.color;\r\n          p.stroke(r, g, b, wave.alpha * 0.5);\r\n          p.strokeWeight(1);\r\n          p.noFill();\r\n          \r\n          p.beginShape();\r\n          for (let angle = 0; angle < p.TWO_PI; angle += 0.2) {\r\n            const radius = 50 + wave.amplitude * Math.sin(angle * 2 + wave.phase);\r\n            const x = p.width / 2 + Math.cos(angle) * radius;\r\n            const y = p.height / 2 + Math.sin(angle) * radius;\r\n            p.vertex(x, y);\r\n          }\r\n          p.endShape(p.CLOSE);\r\n        });\r\n        \r\n        // Draw static particles\r\n        particles.forEach((particle, i) => {\r\n          let x, y;\r\n          \r\n          if (particle.type === 0) {\r\n            // Static orbiting position\r\n            const radius = particle.baseRadius + Math.sin(particle.phaseOffset + seedHash * 0.01) * particle.radiusVariation * 0.5;\r\n            x = Math.cos(particle.angle + seedHash * 0.001) * radius;\r\n            y = Math.sin(particle.angle + seedHash * 0.001) * radius;\r\n          } else if (particle.type === 1) {\r\n            // Static spiral position\r\n            const spiralRadius = particle.baseRadius + (i * 5) % 40;\r\n            const spiralAngle = particle.angle + (i * 0.3);\r\n            x = Math.cos(spiralAngle) * spiralRadius;\r\n            y = Math.sin(spiralAngle) * spiralRadius;\r\n          } else {\r\n            // Static wave position\r\n            const waveRadius = particle.baseRadius + Math.sin(particle.phaseOffset + i * 0.5) * 25;\r\n            x = Math.cos(particle.angle) * waveRadius;\r\n            y = Math.sin(particle.angle) * waveRadius;\r\n          }\r\n          \r\n          // Static size based on particle properties\r\n          const staticVariation = Math.sin(seedHash * 0.01 + i * 0.3) * 0.5 + 0.5;\r\n          const size = particle.size + staticVariation * 3;\r\n          \r\n          // Draw static particle with glow effect\r\n          p.push();\r\n          p.translate(p.width / 2, p.height / 2);\r\n          \r\n          // Outer glow\r\n          for (let glow = 2; glow > 0; glow--) {\r\n            const alpha = 60 / glow;\r\n            p.fill(particle.r, particle.g, particle.b, alpha);\r\n            p.noStroke();\r\n            p.ellipse(x, y, size + glow * 2, size + glow * 2);\r\n          }\r\n          \r\n          // Main particle\r\n          p.fill(particle.r, particle.g, particle.b, 200);\r\n          p.noStroke();\r\n          p.ellipse(x, y, size, size);\r\n          \r\n          // Inner highlight\r\n          p.fill(255, 255, 255, 80);\r\n          p.ellipse(x - size * 0.2, y - size * 0.2, size * 0.3, size * 0.3);\r\n          \r\n          // Connection lines to center (for some particles)\r\n          if (i % 5 === 0) {\r\n            p.stroke(particle.r, particle.g, particle.b, 40);\r\n            p.strokeWeight(0.5);\r\n            p.line(0, 0, x, y);\r\n          }\r\n          \r\n          p.pop();\r\n        });\r\n        \r\n        // Static central energy core\r\n        const coreSize = 12 + Math.sin(seedHash * 0.005) * 4;\r\n        const coreColors = palette[0];\r\n        p.push();\r\n        p.translate(p.width / 2, p.height / 2);\r\n        \r\n        // Core glow\r\n        for (let i = 3; i > 0; i--) {\r\n          const alpha = 60 / i;\r\n          p.fill(coreColors[0], coreColors[1], coreColors[2], alpha);\r\n          p.noStroke();\r\n          p.ellipse(0, 0, coreSize + i * 2, coreSize + i * 2);\r\n        }\r\n        \r\n        // Core\r\n        p.fill(255, 255, 255, 150);\r\n        p.ellipse(0, 0, coreSize * 0.5, coreSize * 0.5);\r\n        p.pop();\r\n      };\r\n\r\n        // No draw loop needed for static aura\r\n        p.noLoop();\r\n      };\r\n\r\n      if (p5ContainerRef.current) {\r\n        p5InstanceRef.current = new p5(sketch, p5ContainerRef.current);\r\n      }\r\n    };\r\n\r\n    // Initialize p5 asynchronously\r\n    initializeP5().catch((error) => {\r\n      console.error('P5 initialization error:', error);\r\n      isGeneratingRef.current = false;\r\n    });\r\n\r\n    return () => {\r\n      isGeneratingRef.current = false;\r\n      if (p5InstanceRef.current) {\r\n        p5InstanceRef.current.remove();\r\n        p5InstanceRef.current = null;\r\n      }\r\n    };\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [moodSeed, transactionCount]); // onImageGenerated handled via ref to prevent re-runs\r\n\r\n  return (\r\n    <div className=\"aura-generator-container\">\r\n      <div\r\n        ref={p5ContainerRef}\r\n        className=\"aura-canvas-container\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuraGenerator;\r\n"],"names":["_ref","moodSeed","transactionCount","onImageGenerated","p5ContainerRef","useRef","p5InstanceRef","isGeneratingRef","hasGeneratedRef","onImageGeneratedRef","useEffect","current","remove","async","p5","default","sketch","p","particles","waveforms","moodPalettes","happy","calm","energetic","peaceful","mysterious","passionate","seedHash","split","reduce","a","b","charCodeAt","palette","seed","lowerSeed","toLowerCase","mood","colors","Object","entries","includes","slice","getMoodPalette","setup","canvas","createCanvas","colorMode","RGB","particleCount","Math","min","max","i","colorIndex","length","r","g","push","x","width","y","height","angle","TWO_PI","baseRadius","radiusVariation","size","phaseOffset","type","waveCount","floor","amplitude","phase","PI","color","alpha","drawStaticAura","setTimeout","imageData","toDataURL","background","map","baseColor","fill","noStroke","ellipse","forEach","wave","index","stroke","strokeWeight","noFill","beginShape","radius","sin","cos","vertex","endShape","CLOSE","particle","spiralRadius","spiralAngle","waveRadius","staticVariation","translate","glow","line","pop","coreSize","coreColors","noLoop","initializeP5","catch","error","console","_jsx","className","children","ref"],"sourceRoot":""}
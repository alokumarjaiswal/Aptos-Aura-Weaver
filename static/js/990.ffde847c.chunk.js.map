{"version":3,"file":"static/js/990.ffde847c.chunk.js","mappings":"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","sources":["AuraGenerator.tsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport p5 from 'p5';\n\ninterface AuraGeneratorProps {\n  moodSeed: string;\n  transactionCount: number;\n  onImageGenerated: (imageData: string) => void;\n}\n\nconst AuraGenerator: React.FC<AuraGeneratorProps> = ({\n  moodSeed,\n  transactionCount,\n  onImageGenerated\n}) => {\n  const p5ContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!p5ContainerRef.current || !moodSeed) return;\n\n    const sketch = (p: any) => {\n      let particles: any[] = [];\n      let waveforms: any[] = [];\n      \n      // Advanced mood-based color palettes\n      const moodPalettes: { [key: string]: number[][] } = {\n        happy: [[255, 223, 0], [255, 165, 0], [255, 69, 0]], // Warm yellows/oranges\n        calm: [[64, 224, 208], [0, 191, 255], [138, 43, 226]], // Cool blues/purples\n        energetic: [[255, 20, 147], [255, 0, 255], [255, 105, 180]], // Vibrant magentas\n        peaceful: [[144, 238, 144], [152, 251, 152], [173, 255, 47]], // Soft greens\n        mysterious: [[75, 0, 130], [138, 43, 226], [72, 61, 139]], // Deep purples\n        passionate: [[220, 20, 60], [255, 69, 0], [255, 140, 0]], // Reds/oranges\n        default: [[100, 149, 237], [65, 105, 225], [30, 144, 255]] // Blue spectrum\n      };\n\n      const getMoodPalette = (seed: string): number[][] => {\n        const lowerSeed = seed.toLowerCase();\n        for (const [mood, colors] of Object.entries(moodPalettes)) {\n          if (lowerSeed.includes(mood) || lowerSeed.includes(mood.slice(0, 4))) {\n            return colors;\n          }\n        }\n        return moodPalettes.default;\n      };\n      \n      p.setup = () => {\n        const canvas = p.createCanvas(400, 400);\n        p.colorMode(p.RGB);\n        \n        // Create sophisticated background\n        const seedHash = moodSeed.split('').reduce((a, b) => a + b.charCodeAt(0), 0);\n        \n        const palette = getMoodPalette(moodSeed);\n        const particleCount = Math.min(Math.max(transactionCount, 8) + 15, 50); // Cap for performance\n        \n        // Generate main particles with enhanced properties\n        for (let i = 0; i < particleCount; i++) {\n          const colorIndex = i % palette.length;\n          const [r, g, b] = palette[colorIndex];\n          \n          particles.push({\n            x: p.width / 2,\n            y: p.height / 2,\n            angle: (i / particleCount) * p.TWO_PI + (seedHash * 0.1),\n            baseRadius: 60 + (i % 4) * 30,\n            radiusVariation: 20 + (i % 3) * 15,\n            size: 6 + (i % 4) * 3,\n            r: Math.min(255, r + (seedHash + i * 31) % 50),\n            g: Math.min(255, g + (seedHash + i * 47) % 50),\n            b: Math.min(255, b + (seedHash + i * 67) % 50),\n            speed: 0.015 + (i % 4) * 0.008,\n            phaseOffset: i * 0.3,\n            type: i % 3 // 0: orbiting, 1: spiral, 2: wave\n          });\n        }\n        \n        // Generate background waveforms\n        const waveCount = Math.floor(transactionCount / 10) + 3;\n        for (let i = 0; i < Math.min(waveCount, 8); i++) {\n          waveforms.push({\n            amplitude: 30 + i * 10,\n            frequency: 0.02 + i * 0.01,\n            phase: i * p.PI * 0.5,\n            color: palette[i % palette.length],\n            alpha: 30 + i * 10\n          });\n        }\n        \n        console.log(`Generated ${particles.length} particles and ${waveforms.length} waveforms`);\n        \n        // Draw initial frame\n        drawAura();\n        \n        // Capture image after a brief animation\n        setTimeout(() => {\n          const imageData = canvas.canvas.toDataURL('image/png');\n          onImageGenerated(imageData);\n          console.log('Enhanced aura captured');\n        }, 500);\n      };\n\n      const drawAura = () => {\n        // Dynamic gradient background\n        const time = p.millis() * 0.001;\n        \n        // Create radial gradient background\n        for (let r = 400; r > 0; r -= 2) {\n          const inter = p.map(r, 0, 400, 0, 1);\n          const alpha = 255 * (1 - inter * 0.8);\n          p.fill(10 + Math.sin(time * 0.5) * 20, 15 + Math.cos(time * 0.3) * 25, 25 + Math.sin(time * 0.7) * 30, alpha * 0.3);\n          p.noStroke();\n          p.ellipse(p.width / 2, p.height / 2, r, r);\n        }\n        \n        // Draw background waveforms\n        waveforms.forEach((wave, index) => {\n          const [r, g, b] = wave.color;\n          p.stroke(r, g, b, wave.alpha);\n          p.strokeWeight(2);\n          p.noFill();\n          \n          p.beginShape();\n          for (let angle = 0; angle < p.TWO_PI; angle += 0.1) {\n            const radius = 100 + wave.amplitude * Math.sin(angle * 3 + time * wave.frequency + wave.phase);\n            const x = p.width / 2 + Math.cos(angle) * radius;\n            const y = p.height / 2 + Math.sin(angle) * radius;\n            p.vertex(x, y);\n          }\n          p.endShape(p.CLOSE);\n        });\n        \n        // Draw enhanced particles\n        particles.forEach((particle, i) => {\n          let x, y;\n          \n          if (particle.type === 0) {\n            // Orbiting particles\n            const radius = particle.baseRadius + Math.sin(time * particle.speed + particle.phaseOffset) * particle.radiusVariation;\n            x = Math.cos(particle.angle + time * particle.speed) * radius;\n            y = Math.sin(particle.angle + time * particle.speed) * radius;\n          } else if (particle.type === 1) {\n            // Spiral particles\n            const spiralRadius = particle.baseRadius + time * 10;\n            const spiralAngle = particle.angle + time * particle.speed * 2;\n            x = Math.cos(spiralAngle) * (spiralRadius % 150);\n            y = Math.sin(spiralAngle) * (spiralRadius % 150);\n          } else {\n            // Wave-like motion\n            const waveRadius = particle.baseRadius + Math.sin(time * particle.speed * 3 + particle.phaseOffset) * 40;\n            x = Math.cos(particle.angle + time * particle.speed) * waveRadius;\n            y = Math.sin(particle.angle + time * particle.speed * 1.5) * waveRadius;\n          }\n          \n          // Pulsating size with more complex pattern\n          const pulse1 = (Math.sin(time * 2 + i * 0.5) + 1) * 0.5;\n          const pulse2 = (Math.cos(time * 1.5 + i * 0.3) + 1) * 0.3;\n          const size = particle.size + pulse1 * 4 + pulse2 * 2;\n          \n          // Draw particle with glow effect\n          p.push();\n          p.translate(p.width / 2, p.height / 2);\n          \n          // Outer glow\n          for (let glow = 3; glow > 0; glow--) {\n            const alpha = 80 / glow;\n            p.fill(particle.r, particle.g, particle.b, alpha);\n            p.noStroke();\n            p.ellipse(x, y, size + glow * 3, size + glow * 3);\n          }\n          \n          // Main particle\n          p.fill(particle.r, particle.g, particle.b, 220);\n          p.noStroke();\n          p.ellipse(x, y, size, size);\n          \n          // Inner highlight\n          p.fill(255, 255, 255, 100);\n          p.ellipse(x - size * 0.2, y - size * 0.2, size * 0.4, size * 0.4);\n          \n          // Connection lines to center (for some particles)\n          if (i % 4 === 0) {\n            p.stroke(particle.r, particle.g, particle.b, 50);\n          p.strokeWeight(1);\n            p.line(0, 0, x, y);\n          }\n          \n          p.pop();\n        });\n        \n        // Central energy core\n        const coreSize = 20 + Math.sin(time * 3) * 8;\n        const coreColors = getMoodPalette(moodSeed)[0];\n        p.push();\n        p.translate(p.width / 2, p.height / 2);\n        \n        // Core glow\n        for (let i = 5; i > 0; i--) {\n          const alpha = 100 / i;\n          p.fill(coreColors[0], coreColors[1], coreColors[2], alpha);\n          p.noStroke();\n          p.ellipse(0, 0, coreSize + i * 4, coreSize + i * 4);\n        }\n        \n        // Core\n        p.fill(255, 255, 255, 200);\n        p.ellipse(0, 0, coreSize * 0.6, coreSize * 0.6);\n        p.pop();\n      };\n\n      p.draw = () => {\n        drawAura();\n      };\n    };\n\n    const p5Instance = new p5(sketch, p5ContainerRef.current);\n\n    return () => {\n      p5Instance.remove();\n    };\n  }, [moodSeed, transactionCount, onImageGenerated]);\n\n  return (\n    <div className=\"aura-generator-container\">\n      <div\n        ref={p5ContainerRef}\n        className=\"aura-canvas-container\"\n      />\n      <div className=\"aura-metadata\">\n        <div className=\"aura-metadata-item\">\n          <span className=\"aura-metadata-label\">Mood</span>\n          <span className=\"aura-metadata-value\">\"{moodSeed}\"</span>\n        </div>\n        <div className=\"aura-metadata-item\">\n          <span className=\"aura-metadata-label\">Particles</span>\n          <span className=\"aura-metadata-value\">{Math.max(transactionCount, 5) + 10}</span>\n        </div>\n        <div className=\"aura-metadata-item\">\n          <span className=\"aura-metadata-label\">Transactions</span>\n          <span className=\"aura-metadata-value\">{transactionCount}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AuraGenerator;\n"],"names":["_ref","moodSeed","transactionCount","onImageGenerated","p5ContainerRef","useRef","useEffect","current","p5Instance","p5","p","particles","waveforms","moodPalettes","happy","calm","energetic","peaceful","mysterious","passionate","default","getMoodPalette","seed","lowerSeed","toLowerCase","mood","colors","Object","entries","includes","slice","setup","canvas","createCanvas","colorMode","RGB","seedHash","split","reduce","a","b","charCodeAt","palette","particleCount","Math","min","max","i","colorIndex","length","r","g","push","x","width","y","height","angle","TWO_PI","baseRadius","radiusVariation","size","speed","phaseOffset","type","waveCount","floor","amplitude","frequency","phase","PI","color","alpha","console","log","concat","drawAura","setTimeout","imageData","toDataURL","time","millis","map","fill","sin","cos","noStroke","ellipse","forEach","wave","index","stroke","strokeWeight","noFill","beginShape","radius","vertex","endShape","CLOSE","particle","spiralRadius","spiralAngle","waveRadius","pulse1","pulse2","translate","glow","line","pop","coreSize","coreColors","draw","remove","_jsxs","className","children","_jsx","ref"],"sourceRoot":""}
{"version":3,"file":"static/js/773.190feac9.chunk.js","mappings":"yWAsBO,MAAMA,EAAmB,SAC9BC,GAEsB,IADtBC,EAAkCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEtC,MAAM,UACJG,EAAY,EAAC,UACbC,EAAY,IAAG,kBACfC,GAAoB,EAAI,oBACxBC,EAAsB,IACpBP,EAEEQ,EAAcT,EAAKU,OAGzB,IAAKD,EACH,MAAO,CACLE,SAAS,EACTC,MAAO,kDAKX,GAAIH,EAAYN,OAASE,EACvB,MAAO,CACLM,SAAS,EACTC,MAAM,gCAADC,OAAkCR,EAAS,qBAIpD,GAAII,EAAYN,OAASG,EACvB,MAAO,CACLK,SAAS,EACTC,MAAM,iCAADC,OAAmCP,EAAS,gBAKnD,MAAMQ,EAAqB,CACzB,WACA,eACA,SACA,aACA,aACA,UAGF,IAAK,MAAMC,KAAWD,EACpB,GAAIC,EAAQC,KAAKP,GACf,MAAO,CACLE,SAAS,EACTC,MAAO,sGAOb,GAD2B,wBACJI,KAAKP,GAC1B,MAAO,CACLE,SAAS,EACTC,MAAO,gFAKb,IAAKL,EAAmB,CAItB,IAH0BE,EAAYQ,MAAM,oBAAsB,IAAId,OAC1BM,EAAYN,OAEjCK,EACrB,MAAO,CACLG,SAAS,EACTC,MAAO,oFAGb,CAEA,MAAO,CAAED,SAAS,EACpB,EAKaO,EAA2B,SACtCC,GAEsB,IADtBlB,EAA0CC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAE9C,MAAM,SACJkB,EAAW,EAAC,SACZC,EAAW,IAAM,cACjBC,GAAgB,GACdrB,EAEJ,MAAqB,kBAAVkB,GAAsBI,MAAMJ,GAC9B,CACLR,SAAS,EACTC,MAAO,6DAINU,GAAiBH,EAAQC,EACrB,CACLT,SAAS,EACTC,MAAO,yCAIPO,EAAQE,EACH,CACLV,SAAS,EACTC,MAAO,mEAIJ,CAAED,SAAS,EACpB,EAKaa,EAA4BA,IAClCC,UAAUC,OAOR,CAAEf,SAAS,GANT,CACLA,SAAS,EACTC,MAAO,oEAUAe,EAAqBA,CAChCC,EACAC,IAEKD,GAAWC,EAOT,CAAElB,SAAS,GANT,CACLA,SAAS,EACTC,MAAO,+EAUAkB,EACXC,GAEKA,EAOE,CAAEpB,SAAS,GANT,CACLA,SAAS,EACTC,MAAO,0DAUAoB,EAAqBC,IAChC,IAAKA,EACH,MAAO,CACLtB,SAAS,EACTC,MAAO,kEAKX,IAEE,OADA,IAAIsB,IAAID,GACD,CAAEtB,SAAS,EACpB,CAAE,MAAAwB,GACA,MAAO,CACLxB,SAAS,EACTC,MAAO,6BAEX,GAWWwB,EAAkBA,KAC7B,MAAMC,EAAYZ,UAAUY,UAAUC,cAEtC,OADiB,iEAAiEtB,KAAKqB,IAQ5EE,EAAyBA,MAC1BC,OAAeC,SAAYD,OAAeE,MAOzCC,EAAyBA,KAEpCH,OAAOI,KADU,qBACK,U","sources":["utils/validation.ts"],"sourcesContent":["/**\r\n * Validation utilities for user inputs and data\r\n */\r\n\r\nimport { ValidationResult } from '../types/app';\r\n\r\nexport interface MoodSeedValidationOptions {\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  allowSpecialChars?: boolean;\r\n  maxSpecialCharRatio?: number;\r\n}\r\n\r\nexport interface TransactionCountValidationOptions {\r\n  minValue?: number;\r\n  maxValue?: number;\r\n  allowNegative?: boolean;\r\n}\r\n\r\n/**\r\n * Comprehensive mood seed validation\r\n */\r\nexport const validateMoodSeed = (\r\n  seed: string,\r\n  options: MoodSeedValidationOptions = {}\r\n): ValidationResult => {\r\n  const {\r\n    minLength = 2,\r\n    maxLength = 100,\r\n    allowSpecialChars = true,\r\n    maxSpecialCharRatio = 0.5\r\n  } = options;\r\n\r\n  const trimmedSeed = seed.trim();\r\n\r\n  // Check for empty or whitespace-only input\r\n  if (!trimmedSeed) {\r\n    return {\r\n      isValid: false,\r\n      error: 'Please enter a mood seed to generate your aura'\r\n    };\r\n  }\r\n\r\n  // Check length constraints\r\n  if (trimmedSeed.length < minLength) {\r\n    return {\r\n      isValid: false,\r\n      error: `Mood seed should be at least ${minLength} characters long`\r\n    };\r\n  }\r\n\r\n  if (trimmedSeed.length > maxLength) {\r\n    return {\r\n      isValid: false,\r\n      error: `Mood seed should be less than ${maxLength} characters`\r\n    };\r\n  }\r\n\r\n    // Check for potentially harmful content\r\n    const suspiciousPatterns = [\r\n      /<script/i,\r\n      /javascript:/i,\r\n      /data:/i,\r\n      /vbscript:/i,\r\n      /on\\w+\\s*=/i,\r\n      /[<>\"']/  // Reject angle brackets and quotes\r\n    ];\r\n\r\n    for (const pattern of suspiciousPatterns) {\r\n      if (pattern.test(trimmedSeed)) {\r\n        return {\r\n          isValid: false,\r\n          error: 'Mood seed contains invalid characters (<, >, \", \\'). Please use only letters, numbers, and spaces.'\r\n        };\r\n      }\r\n    }\r\n\r\n    // Check for control characters\r\n    const controlCharPattern = /[\\u0000-\\u001F\\u007F]/; // eslint-disable-line no-control-regex\r\n    if (controlCharPattern.test(trimmedSeed)) {\r\n      return {\r\n        isValid: false,\r\n        error: 'Mood seed contains invalid control characters. Please use only regular text.'\r\n      };\r\n    }\r\n\r\n  // Check for excessive special characters (potential spam)\r\n  if (!allowSpecialChars) {\r\n    const specialCharCount = (trimmedSeed.match(/[^a-zA-Z0-9\\s]/g) || []).length;\r\n    const specialCharRatio = specialCharCount / trimmedSeed.length;\r\n\r\n    if (specialCharRatio > maxSpecialCharRatio) {\r\n      return {\r\n        isValid: false,\r\n        error: 'Mood seed contains too many special characters. Please use more descriptive text.'\r\n      };\r\n    }\r\n  }\r\n\r\n  return { isValid: true };\r\n};\r\n\r\n/**\r\n * Transaction count validation\r\n */\r\nexport const validateTransactionCount = (\r\n  count: number,\r\n  options: TransactionCountValidationOptions = {}\r\n): ValidationResult => {\r\n  const {\r\n    minValue = 0,\r\n    maxValue = 100000,\r\n    allowNegative = false\r\n  } = options;\r\n\r\n  if (typeof count !== 'number' || isNaN(count)) {\r\n    return {\r\n      isValid: false,\r\n      error: 'Invalid transaction count. Please refresh and try again.'\r\n    };\r\n  }\r\n\r\n  if (!allowNegative && count < minValue) {\r\n    return {\r\n      isValid: false,\r\n      error: 'Transaction count cannot be negative.'\r\n    };\r\n  }\r\n\r\n  if (count > maxValue) {\r\n    return {\r\n      isValid: false,\r\n      error: 'Transaction count seems unusually high. Please verify the data.'\r\n    };\r\n  }\r\n\r\n  return { isValid: true };\r\n};\r\n\r\n/**\r\n * Network connectivity validation\r\n */\r\nexport const validateNetworkConnection = (): ValidationResult => {\r\n  if (!navigator.onLine) {\r\n    return {\r\n      isValid: false,\r\n      error: 'No internet connection. Please check your network and try again.'\r\n    };\r\n  }\r\n\r\n  return { isValid: true };\r\n};\r\n\r\n/**\r\n * IPFS configuration validation\r\n */\r\nexport const validateIPFSConfig = (\r\n  apiKey?: string,\r\n  secretKey?: string\r\n): ValidationResult => {\r\n  if (!apiKey || !secretKey) {\r\n    return {\r\n      isValid: false,\r\n      error: 'IPFS configuration missing. Please set up IPFS credentials for NFT storage.'\r\n    };\r\n  }\r\n\r\n  return { isValid: true };\r\n};\r\n\r\n/**\r\n * Wallet connection validation\r\n */\r\nexport const validateWalletConnection = (\r\n  accountAddress?: string | null | undefined\r\n): ValidationResult => {\r\n  if (!accountAddress) {\r\n    return {\r\n      isValid: false,\r\n      error: 'No wallet connected. Please connect your wallet first.'\r\n    };\r\n  }\r\n\r\n  return { isValid: true };\r\n};\r\n\r\n/**\r\n * Image data validation\r\n */\r\nexport const validateImageData = (imageData: string): ValidationResult => {\r\n  if (!imageData) {\r\n    return {\r\n      isValid: false,\r\n      error: 'No aura generated yet. Please wait for the aura to be created.'\r\n    };\r\n  }\r\n\r\n  // Check if it's a valid data URL\r\n  try {\r\n    new URL(imageData);\r\n    return { isValid: true };\r\n  } catch {\r\n    return {\r\n      isValid: false,\r\n      error: 'Invalid image data format.'\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Device and wallet detection utilities\r\n */\r\n\r\n/**\r\n * Check if we're on a desktop device by analyzing user agent\r\n * @returns {boolean} True if desktop device, false if mobile\r\n */\r\nexport const isDesktopDevice = (): boolean => {\r\n  const userAgent = navigator.userAgent.toLowerCase();\r\n  const isMobile = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent);\r\n  return !isMobile;\r\n};\r\n\r\n/**\r\n * Check if Petra wallet extension is installed in the browser\r\n * @returns {boolean} True if Petra wallet is detected, false otherwise\r\n */\r\nexport const isPetraWalletInstalled = (): boolean => {\r\n  return !!(window as any).aptos || !!(window as any).petra;\r\n};\r\n\r\n/**\r\n * Redirect user to Petra wallet installation page\r\n * Opens petra.app in a new tab for desktop users\r\n */\r\nexport const redirectToPetraInstall = (): void => {\r\n  const petraUrl = 'https://petra.app/';\r\n  window.open(petraUrl, '_blank');\r\n};"],"names":["validateMoodSeed","seed","options","arguments","length","undefined","minLength","maxLength","allowSpecialChars","maxSpecialCharRatio","trimmedSeed","trim","isValid","error","concat","suspiciousPatterns","pattern","test","match","validateTransactionCount","count","minValue","maxValue","allowNegative","isNaN","validateNetworkConnection","navigator","onLine","validateIPFSConfig","apiKey","secretKey","validateWalletConnection","accountAddress","validateImageData","imageData","URL","_unused","isDesktopDevice","userAgent","toLowerCase","isPetraWalletInstalled","window","aptos","petra","redirectToPetraInstall","open"],"sourceRoot":""}